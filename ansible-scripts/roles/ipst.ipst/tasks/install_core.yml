---

#
  - debug:
      msg: " log file: {{ core_log_file }}"

# clone/update ipst-core project from github
# Note: update does not work when there are local modifications (e.g. when some of the project's file are edited on-site)
  - name: core retrieve sources from github
    git: repo="{{ core_github_uri }}"
      dest="{{ core_sources_path }}"
      version="{{ core_github_branchname }}"
    register: gitop
    when: ipst_github_enabled == True

  #
  - name: core check if sources directory exists ...
    stat: path="{{ core_sources_path }}"
    register: sourcesPathStat

  #
  - name: core .... stop if sources directory does not exist
    fail: msg="sources path {{ core_sources_path }} does not exist; either provide required sources on target node or set ipst_github_enable variable, to retrieve the project from GitHub."
    when: sourcesPathStat.stat.exists == False

  # remove a previously generated install config file (to not interfere with the ansible configurations)
  - name: core remove current install configuration
    file: path={{ core_sources_path }}/install.cfg state=absent
    when: (gitop.changed or forceBuild)

  # install core
  - name: core build and install ipst-core
    # Using shell because 'command' does not handle well redirections, pipes, etc.  Using -l to inherit the environment variables, correctly
    shell: /bin/bash -lc "{{ core_install_cmd }}"
    args:
      chdir: "{{core_sources_path}}"
    when: (gitop.changed or forceBuild)
    register: installCoreScript
    #in case, ignore errors (to proceed to next steps and possibly log the errors)
    ignore_errors: True

  # log to file some variables
  - name: remove previous log file
    local_action: file state=absent path="{{ core_log_file }}"
    when: installCoreScript is defined
      and installCoreScript.skipped is not defined
  - name: log file
    local_action: lineinfile
      dest="{{ core_log_file }}"
      line="{{ {'_name':item._name|default('n/a') ,'cmd':item.cmd|default('n/a') ,'delta':item.delta|default('n/a') ,'end':item.end|default('n/a') ,'rc':item.rc|default('n/a') ,'state':item.state|default('n/a') ,'start':item.start|default('n/a') ,'stdout_lines':item.stdout_lines|default('n/a')} | to_nice_json }}"
      state=present
      insertafter=EOF
      create=True
    when: item is defined
      and installCoreScript is defined
      and installCoreScript.skipped is not defined
    no_log: True
    with_items:
      - "{{ installCoreScript |combine({'_name':'installCoreScript'}) }}"




  #
  - name: core stop execution in case of failure
    fail: msg="The execution has failed because of errors."
    when: installCoreScript is defined and installCoreScript.rc > 1000

  #
  - name: core check for additional thirdparty files
    local_action: stat path={{ misc_thirdparties_path}}
    register: statThirdpartyFolder

  #
  - name: ipst-core make sure that the target directory exists
    file: dest="{{ ipst_install_path }}" state=directory mode=0755
    when:  statThirdpartyFolder.stat.isdir is defined and statThirdpartyFolder.stat.isdir

  #
  - name: ipst-core complete the remote installation with additional thirdparty files (if available)
    unarchive: src={{ item }} dest={{ ipst_install_path  }}
    when:  statThirdpartyFolder.stat.isdir is defined and statThirdpartyFolder.stat.isdir
    register: installAdditionalFiles
    with_fileglob:
      - "{{ misc_thirdparties_path}}/*"
