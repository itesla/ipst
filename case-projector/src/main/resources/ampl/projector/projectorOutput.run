###############################################################################
#
# Copyright (c) 2017, RTE (http://www.rte-france.com)
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# author: Jean Maeght
#
# Projecteur
# Ecriture des resultats
# 
###############################################################################
print "Debut du fichier projectorOutput.run";
printf "Ecriture des resultats\n";

# Il faut desactiver le presolve d'ampl pour forcer le recalcul des variables non utilisees
option presolve 0;


#
# Indicateur relatif au statut final
#
if (solve_result_num >= 0 and solve_result_num < 100) or (solve_result_num >= 400 and solve_result_num < 410) then
  let final_status := "projector_OK";
else
  let final_status := "projector_NOK";


##########################################################################
# 
# Ecriture des groupes
#
###########################################################################

if final_status = "projector_OK" then {
printf '#"num" "bus" "v_regul" "targetV(pu)" "targetP(MW)" "targetQ(MVar)" "P(MW)" "Q(MVar)"\n' > projector_results_generators.txt;
printf {(g,n) in UNIT: n in NOEUDCC}
  "%i %i %s %f %f %f %f %f\n",
  g,
  n,
  # unit_vregul[g,n] -> ce qu'il y a dans la situation en entree
  if (g,n) in UNITCC_PV then "true" else "false", # Voir definition de UNITCC_PV
  V[n],
  if (g,n) in UNITCC then unit_P[g,n] else 0, # On peut avoir un groupe raccorde mais avec consignes nulles
  if (g,n) in UNITCC then unit_Q[g,n] else 0, # On peut avoir un groupe raccorde mais avec consignes nulles
  if (g,n) in UNITCC then -unit_P[g,n] else 0, # On peut avoir un groupe raccorde mais avec consignes nulles # Homogene a une conso
  if (g,n) in UNITCC then -unit_Q[g,n] else 0  # On peut avoir un groupe raccorde mais avec consignes nulles # Homogene a une conso
  > projector_results_generators.txt;
}



###########################################################################
# 
# Ecriture des noeuds
#
###########################################################################

printf '#"num" "v(pu)" "theta(rad)"\n'
  > projector_results_buses.txt;
printf {n in NOEUDCC}
  "%i %.10f %.10f\n",
  n,V[n],Ph[n]
   > projector_results_buses.txt;


###########################################################################
# 
# Ecriture des branches
#
###########################################################################

printf '#"num" "bus1" "bus2" "p1(MW)" "p2(MW)" "q1(MVar)" "q2(MVar)"\n'
  > projector_results_branches.txt;
printf {(qq,n,m) in QUADCC}
  "%i %i %i %f %f %f %f\n",
  qq,n,m,
  100 * V[n] * Red_Tran_Act_Dir[qq,n,m],
  100 * V[m] * Red_Tran_Act_Inv[qq,n,m],
  100 * V[n] * Red_Tran_Rea_Dir[qq,n,m],
  100 * V[m] * Red_Tran_Rea_Inv[qq,n,m]
  > projector_results_branches.txt;


###########################################################################
# 
# Ecriture des regleurs
#
###########################################################################

printf '#"num" "tap"\n'
  > projector_results_rtc.txt;
printf {(qq,m,n) in QUADCC_REGL}
  "%i %i\n",
  quad_ptrRegl[qq,m,n],
  regl_tap0[quad_ptrRegl[qq,m,n]]
  > projector_results_rtc.txt;


###########################################################################
# 
# Ecriture des dephaseurs
#
###########################################################################

printf '#"num" "tap"\n'
  > projector_results_ptc.txt;
printf {(qq,m,n) in QUADCC_DEPH}
  "%i %i\n",
  quad_ptrDeph[qq,m,n],
  deph_tap0[quad_ptrDeph[qq,m,n]]
  > projector_results_ptc.txt;


###########################################################################
# 
# Ecriture des HVDC
#
###########################################################################

printf '#"num" "convertersMode" "targetP(MW)"\n'
  > projector_results_hvdc.txt;


###########################################################################
# 
# Ecriture des conso
#
###########################################################################

printf '#"num" "bus" "p(MW)" "q(MVar)" "p0(MW)" "q0(MVar)"\n'
  > projector_results_loads.txt;
printf {(c,n) in CONSOCC}
  "%i %i %f %f %f %f\n",
  c,n,
  conso_PFix[c,n],
  conso_QFix[c,n],
  conso_p[c,n],
  conso_q[c,n]
  > projector_results_loads.txt;


###########################################################################
# 
# Ecriture des shunts
#
###########################################################################

printf '#"num" "bus" "b(pu)" "Q(MVar)" "sections_count"\n'
  > projector_results_shunts.txt;
printf {(s,n) in SHUNTCC}
  "%i %i %f %f %i\n",
  s,n,
  shunt_valnom[s,n], # Homogene a une production de reactif
  -shunt_valnom[s,n]*100*V[n]^2, # Dans le fichier ampl_networks_shunts.txt, Q est de signe oppose a celui de b (b==valnom)
                                 # Homogene a une consommation de reactif
  shunt_sections_count[s,n]
  > projector_results_shunts.txt;


###########################################################################
# 
# Ecriture des static var compensators
#
###########################################################################

printf '#"num" "bus" "v_regul" "targetV(pu)" "Q(MVar)"\n'
  > projector_results_static_var_compensators.txt;
printf {(s,n) in SVCCC}
  "%i %i %s %f %f\n",
  s,n,
  if (s,n) in SVC_V then "true" else "false",
  V[n],
  if (s,n) in SVC_V then -100*svc_b[s,n]*V[n]^2 # signe '-' car homogene a une consommation de reactif
  else if (s,n) in SVC_FIXE then svc_Q0[s,n]
  > projector_results_static_var_compensators.txt;


###########################################################################
# 
# Ecriture des lcc converter stations
#
###########################################################################

printf '#"num" "bus" "P(MW)" "Q(MVar)"\n'
  > projector_results_lcc_converter_stations.txt;


###########################################################################
# 
# Ecriture des vsc converter stations
#
###########################################################################

printf '#"num" "bus" "v_regul" "targetV(pu)" "targetQ(MVar)" "P(MW)" "Q(MVar)"\n'
  > projector_results_vsc_converter_stations.txt;
printf {(sc,n) in VSCCONV}
  "%i %i %s %f %f %f %f\n",
  sc,n,vscconv_vregul[sc,n],V[n],vscconv_Q[sc,n],vscconv_P[sc,n],vscconv_Q[sc,n]
  > projector_results_vsc_converter_stations.txt;


###########################################################################
# 
# Ecriture des indicateurs
#
###########################################################################


#
# Indicateur relatif au statut final
#
printf "%s %s\n","final_status", final_status > projector_results_indic.txt;
printf "%s %s\n","solve_result_num",solve_result_num > projector_results_indic.txt;

# Fermeture du fichier pour autoriser l'ecriture directement par le shell
close;

#
# Nom de la situation et du repertoire courant
#
shell 'echo situation $(head -1 ampl_network_substations.txt|cut -d\( -f2 |cut -d\/ -f1) >> projector_results_indic.txt';
shell 'echo repertoire $(basename $PWD) >> projector_results_indic.txt';

# Reouverture du fichier dans ampl pour la suite de indicateurs
printf "" >> projector_results_indic.txt;

# Temps de resolution
printf "%s %s\n","_total_solve_time",_total_solve_time > projector_results_indic.txt;

# Nombre de groupe ayant un domaine dynamique
printf "%s %i\n","nbGroupesDomaine",card(DOMAIN_ID) > projector_results_indic.txt;

# Nombre de coupes pour les domaines dynamiques
printf "%s %i\n","nbCoupesDomaines",card(UNIT_DOMAIN_CTR) > projector_results_indic.txt;

# Nombre de groupes hors Pmin et Pmax
printf "%s %i\n","nbGroupesHorsPmin",card(UNITHORSPMIN) > projector_results_indic.txt;
printf "%s %i\n","nbGroupesHorsPmax",card(UNITHORSPMAX) > projector_results_indic.txt;

# Indicateurs sur les bornes des groupes
printf "%s %i\n","nbGroupesPminInvalide",card({(g,n) in UNITCC: unit_Pmin[g,n] < -9000}) > projector_results_indic.txt;
printf "%s %i\n","nbGroupesPmaxInvalide",card({(g,n) in UNITCC: unit_Pmax[g,n] < -9000}) > projector_results_indic.txt;
printf "%s %i\n","nbGroupesVminInvalide",card({(g,n) in UNITCC: substation_Vmin[unit_substation[g,n]] <= 0})
  > projector_results_indic.txt;
printf "%s %i\n","nbGroupesVmaxInvalide",card({(g,n) in UNITCC: substation_Vmax[unit_substation[g,n]] <= 0})
  > projector_results_indic.txt;


# Somme des P,Q avant apres
printf "%s %.1f\n", "sommePavant", sum {(g,n) in UNITCC} unit_P0[g,n] > projector_results_indic.txt;
printf "%s %.1f\n", "sommePapres", sum {(g,n) in UNITCC} unit_P[g,n]  > projector_results_indic.txt;
printf "%s %.1f\n", "sommeQavant", sum {(g,n) in UNITCC} unit_Q0[g,n] > projector_results_indic.txt;
printf "%s %.1f\n", "sommeQapres", sum {(g,n) in UNITCC} unit_Q[g,n]  > projector_results_indic.txt;

# Variations totales et moyennes P,Q
let tempo := 1.0 / card(UNITCC);
printf "%s %.1f\n", "variationTotaleP", sum {(g,n) in UNITCC} abs(unit_P[g,n] - unit_P0[g,n]) > projector_results_indic.txt;
printf "%s %.1f\n", "variationTotaleQ", sum {(g,n) in UNITCC} abs(unit_Q[g,n] - unit_Q0[g,n]) > projector_results_indic.txt;
printf "%s %.2f\n", "variationMoyenneP", tempo * sum {(g,n) in UNITCC} abs(unit_P[g,n] - unit_P0[g,n]) > projector_results_indic.txt;
printf "%s %.2f\n", "variationMoyenneQ", tempo * sum {(g,n) in UNITCC} abs(unit_Q[g,n] - unit_Q0[g,n]) > projector_results_indic.txt;

# Moyennes Tensions
let tempo := card({(g,n) in UNITCC: unit_vregul[g,n]=="true"});
if tempo > 0 then {
  let tempo := 1.0 / tempo;
  printf "%s %.4f\n", "moyenneVnoeudsPVavant", tempo * sum {(g,n) in UNITCC: unit_vregul[g,n]=="true"} unit_Vc[g,n] > projector_results_indic.txt;
  printf "%s %.4f\n", "moyenneVnoeudsPVapres", tempo * sum {(g,n) in UNITCC: unit_vregul[g,n]=="true"} V[n] > projector_results_indic.txt;
}

# Nombre de groupes modifies P
printf "%s %i\n", "nbGroupesPmodifie01MW",  card({(g,n) in UNITCC : abs(unit_P[g,n] - unit_P0[g,n]) >= 0.1 } ) > projector_results_indic.txt;
printf "%s %i\n", "nbGroupesPmodifie1MW",   card({(g,n) in UNITCC : abs(unit_P[g,n] - unit_P0[g,n]) >= 1   } ) > projector_results_indic.txt;
printf "%s %i\n", "nbGroupesPmodifie10MW",  card({(g,n) in UNITCC : abs(unit_P[g,n] - unit_P0[g,n]) >= 10  } ) > projector_results_indic.txt;
printf "%s %i\n", "nbGroupesPmodifie100MW", card({(g,n) in UNITCC : abs(unit_P[g,n] - unit_P0[g,n]) >= 100 } ) > projector_results_indic.txt;

# Nombre de groupes modifies Q
printf "%s %i\n", "nbGroupesQmodifie01Mvar",  card({(g,n) in UNITCC : abs(unit_Q[g,n] - unit_Q0[g,n]) >= 0.1 } ) > projector_results_indic.txt;
printf "%s %i\n", "nbGroupesQmodifie1Mvar",   card({(g,n) in UNITCC : abs(unit_Q[g,n] - unit_Q0[g,n]) >= 1   } ) > projector_results_indic.txt;
printf "%s %i\n", "nbGroupesQmodifie10Mvar",  card({(g,n) in UNITCC : abs(unit_Q[g,n] - unit_Q0[g,n]) >= 10  } ) > projector_results_indic.txt;
printf "%s %i\n", "nbGroupesQmodifie100Mvar", card({(g,n) in UNITCC : abs(unit_Q[g,n] - unit_Q0[g,n]) >= 100 } ) > projector_results_indic.txt;

# Nombre de groupes modifies V
printf "%s %i\n", "nbGroupesVmodifie01kV",
  card( {(g,n) in UNITCC: unit_vregul[g,n]=="true" and abs(V[n]-unit_Vc[g,n])*substation_Vnomi[unit_substation[g,n]] >= 0.1 })
  > projector_results_indic.txt;
printf "%s %i\n", "nbGroupesVmodifie1kV",
  card( {(g,n) in UNITCC: unit_vregul[g,n]=="true" and abs(V[n]-unit_Vc[g,n])*substation_Vnomi[unit_substation[g,n]] >= 1 })
  > projector_results_indic.txt;
printf "%s %i\n", "nbGroupesVmodifie2kV",
  card( {(g,n) in UNITCC: unit_vregul[g,n]=="true" and abs(V[n]-unit_Vc[g,n])*substation_Vnomi[unit_substation[g,n]] >= 2 })
  > projector_results_indic.txt;
printf "%s %i\n", "nbGroupesVmodifie5kV",
  card( {(g,n) in UNITCC: unit_vregul[g,n]=="true" and abs(V[n]-unit_Vc[g,n])*substation_Vnomi[unit_substation[g,n]] >= 5 })
  > projector_results_indic.txt;


# Groupe ayant le plus varie en P
let tempo := max {(g,n) in UNITCC} abs(unit_P[g,n] + unit_P0[g,n]);
printf "%s %.1f\n", "variationMaximaleP", tempo > projector_results_indic.txt;
for {(g,n) in UNITCC : abs(unit_P[g,n] + unit_P0[g,n]) >= tempo } {
  printf "%s %s\n", "groupeVariationMaximaleP", unit_id[g,n] > projector_results_indic.txt;
  }

# Groupe ayant le plus varie en Q
let tempo := max {(g,n) in UNITCC} abs(unit_Q[g,n] + unit_Q0[g,n]);
printf "%s %.1f\n", "variationMaximaleQ", tempo > projector_results_indic.txt;
for {(g,n) in UNITCC : abs(unit_Q[g,n] + unit_Q0[g,n]) >= tempo } {
  printf "%s %s\n", "groupeVariationMaximaleQ", unit_id[g,n] > projector_results_indic.txt;
  }

# Groupe ayant le plus varie en V
let tempo := max {(g,n) in UNITCC : unit_vregul[g,n]=="true"} abs(V[n]-unit_Vc[g,n]);
printf "%s %.4f\n", "variationMaximaleVpu", tempo > projector_results_indic.txt;
for {(g,n) in UNITCC : unit_vregul[g,n]=="true" and abs(V[n]-unit_Vc[g,n]) >= tempo } {
  printf "%s %s\n", "groupeVariationMaximaleVpu", unit_id[g,n] > projector_results_indic.txt;
  }
let tempo := max {(g,n) in UNITCC : unit_vregul[g,n]=="true"} abs(V[n]-unit_Vc[g,n])*substation_Vnomi[unit_substation[g,n]];
printf "%s %.4f\n", "variationMaximaleVkV", tempo > projector_results_indic.txt;
for {(g,n) in UNITCC : unit_vregul[g,n]=="true" and abs(V[n]-unit_Vc[g,n])*substation_Vnomi[unit_substation[g,n]] >= tempo } {
  printf "%s %s\n", "groupeVariationMaximaleVkV", unit_id[g,n] > projector_results_indic.txt;
  }


###############################################################################
# Ecriture de fichiers de debug pour les groupes, SVC et VSC
###############################################################################

printf "#num;bus;type;name;substation;Vnom;type;Pmin;Pmax;Pmin2;Pmax2;Pc=P0;P;|P-P0|;Qmin;Qmax;Qmin2;Qmax2;Qc=Q0;Q;|Q-Q0|;Vmin;Vmax;Vmin2;Vmax2;Vc=targetV=V0;V;|V-V0|;nbCuts;directory;\n"
  #                                             P                                    Q                                    V 
  > projector_debug_voltageregulators.csv;

# Groupes de production
printf {(g,n) in UNITCC: n in NOEUDCC}
  "%i;%i;%s;%s;%s;%.1f;%s;%.1f;%.1f;%.1f;%.1f;%f;%f;%f;%.1f;%.1f;%.1f;%.1f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%i;%s;\n",
  #                       P                            Q                            V              
  g,n,"unit",
  unit_id[g,n],
  substation_id[noeud_poste[n]],
  substation_Vnomi[noeud_poste[n]],
  # Statut du groupe
  if unit_id[g,n] in DOMAIN_IDENTIFIANTS and gen_vnom_mismatch[g,n,unit_id[g,n]]!=0 then "V_mismatch"
  else if (g,n) in UNITCC_PQV then "UNITCC_PQV"
  else if unit_vregul[g,n]=="true" then "PV_nodomain"
  else if unit_vregul[g,n]!="true" then "PQ_nodomain"
  else "empty",
  unit_Pmin[g,n],
  unit_Pmax[g,n],
  Pmin[g,n],
  Pmax[g,n],
  -unit_P0[g,n],
  unit_P[g,n],
  abs(unit_P[g,n] + unit_P0[g,n]),
  min(unit_qp[g,n],unit_qP[g,n]),
  max(unit_Qp[g,n],unit_QP[g,n]),
  Qmin[g,n],
  Qmax[g,n],
  -unit_Q0[g,n],
  unit_Q[g,n],
  abs(unit_Q[g,n] + unit_Q0[g,n]),
  substation_Vmin[noeud_poste[n]],
  substation_Vmax[noeud_poste[n]],
  min_noeud_V[n],
  max_noeud_V[n],
  noeud_V0[n],
  V[n],
  abs(noeud_V0[n]-V[n]),
  if unit_id[g,n] in DOMAIN_IDENTIFIANTS then card({(numero,g,n,gid) in UNIT_DOMAIN_CTR})
  else 0,
  _cd
  > projector_debug_voltageregulators.csv;

# SVC - static var compensator - CSPR
printf {(s,n) in SVCCC}
  #"%i;%i;%s;%s;%s;%.1f;%s;%.1f;%.1f;%.1f;%.1f;%.1f;%.1f;%.1f;%.1f;%.1f;%.1f;%.1f;%.1f;%.1f;%.1f;%f;%f;%f;%f;%f;%f;%f;%i;%s;\n",
  #                       P                                  Q                                  V              
  "%i;%i;%s;%s;%s;%.1f;%s;%.1f;%.1f;%.1f;%.1f;%f;%f;%f;%.1f;%.1f;%.1f;%.1f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%i;%s;\n",
  #                       P                            Q                            V              
  s,n,"svc",
  svc_id[s,n],
  substation_id[noeud_poste[n]],
  substation_Vnomi[noeud_poste[n]],
  # Statut
  if (s,n) in SVC_V then "regulV"
  else "Qfixe",
  0,0,0,0,0,0,0, #P
  svc_bmin[s,n]*100,
  svc_bmax[s,n]*100,
  svc_bmin[s,n]*100,
  svc_bmax[s,n]*100,
  svc_Q0[s,n], # homogene a une consomation
  if (s,n) in SVC_V then - svc_b[s,n]*100*V[n]^2
  else svc_Q0[s,n],
  if (s,n) in SVC_V then abs(svc_b[s,n]*100*V[n]^2+svc_Q0[s,n])
  else 0,
  substation_Vmin[noeud_poste[n]],
  substation_Vmax[noeud_poste[n]],
  min_noeud_V[n],
  max_noeud_V[n],
  noeud_V0[n],
  V[n],
  if (s,n) in SVC_V then abs(noeud_V0[n]-V[n])
  else 0,
  0,
  _cd
  > projector_debug_voltageregulators.csv;

# Stations de conversion VSC
printf {(sc,n) in VSCCONV}
  #"%i;%i;%s;%s;%s;%.1f;%s;%.1f;%.1f;%.1f;%.1f;%.1f;%.1f;%.1f;%.1f;%.1f;%.1f;%.1f;%.1f;%.1f;%.1f;%f;%f;%f;%f;%f;%f;%f;%i;%s;\n",
  #                       P                                  Q                                  V              
  "%i;%i;%s;%s;%s;%.1f;%s;%.1f;%.1f;%.1f;%.1f;%f;%f;%f;%.1f;%.1f;%.1f;%.1f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%i;%s;\n",
  #                       P                            Q                            V              
  sc,n,"station_vsc",
  vscconv_id[sc,n],
  substation_id[noeud_poste[n]],
  substation_Vnomi[noeud_poste[n]],
  # Statut
  if vscconv_vregul[sc,n]=="true" then "regulV"
  else "Qfixe",
  vscconv_Pmin[sc,n],
  vscconv_Pmax[sc,n],
  vscconv_Pmin[sc,n],
  vscconv_Pmax[sc,n],
  vscconv_P0[sc,n],
  vscconv_P[sc,n],
  abs(vscconv_P0[sc,n] - vscconv_P[sc,n]),
  min( vscconv_qp[sc,n], vscconv_qp0[sc,n], vscconv_qP[sc,n] ),
  max( vscconv_Qp[sc,n], vscconv_Qp0[sc,n], vscconv_QP[sc,n] ),
  min( vscconv_qp[sc,n], vscconv_qp0[sc,n], vscconv_qP[sc,n] ),
  max( vscconv_Qp[sc,n], vscconv_Qp0[sc,n], vscconv_QP[sc,n] ),
  vscconv_Q0[sc,n],
  vscconv_Q[sc,n],
  abs(vscconv_Q0[sc,n] - vscconv_Q[sc,n]),
  substation_Vmin[noeud_poste[n]],
  substation_Vmax[noeud_poste[n]],
  min_noeud_V[n],
  max_noeud_V[n],
  noeud_V0[n],
  V[n],
  abs(V[n] - noeud_V0[n]),
  0,
  _cd
  > projector_debug_voltageregulators.csv;


###############################################################################
# Fin du fichier
###############################################################################
print "Fin du fichier projectorOutput.run";

