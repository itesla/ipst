###############################################################################
#
# Copyright (c) 2017, RTE (http://www.rte-france.com)
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# author: Jean Maeght
#
# Projecteur
# Objectif: modifier le moins possible les parametres des groupes d'une 
# situation realisee ou previsionnelle, mais de facon a ce que l'on puisse
# demarrer une simulation dynamique.
# Il s'agit de "projeter" les points de fonctionnement des groupes dans le 
# domaine sur lequel les simulations dynamiques fonctionnent
#
# Prerequis : la situation doit etre complete, y compris les tensions et 
# phases en tous noeuds
# Prerequis pas certain : les tensions sont dans leurs bornes
#
###############################################################################



###############################################################################
# 
# Choix de modelisation
#
# Jean Maeght + Nicolas Omont, 27 juin 2018
#
###############################################################################
/*
                  Valeur modelisee :   P        Q         V
 Groupes PV avec domaine dynamique : optimise optimise  optimise
 Groupes PQ avec domaine dynamique : optimise optimise  optimise
 Groupes PV sans domaine dynamique : optimise optimise* optimise
 Groupes PQ sans domaine dynamique : optimise fixe      libre	
         SVC en reglage de tension : 0        optimise  optimise
                    SVC les autres : 0        fixe      libre
Stations VSC en reglage de tension : fixe     optimise  optimise
          Stations VSC avec Q fixe : fixe     fixe      libre
"libre" signifie absent de la fonction objectif
"optimise" signifie present dans la fonction objectif. "optimise*" correspond à une pondération moindre dans l'objectif.
"fixe" signifie que la valeur presente dans la situation est utilisse comme valeur fixe
optimise -> le resultat est ecrit comme target
Pour V optimise, la cible est le V du dernier load flow
Ecrire aussi les valeurs non optimisees dans les targets
Verifier tenue de tension groupes etrangers lorsqu'ils sont modifies ; enlever les bornes en reactif
*/



###############################################################################
# Debut des traitements
###############################################################################

print "Debut du fichier projector.run";

# Effacement des parametres, variable, contraintes et modeles anterieurs
reset;
# Fermeture de tous les fichiers precedemment ouverts
close;

# La commande ci-dessous permet ce creer des fichirs vides s'ils sont inexistants
shell 'touch ampl_generators_domains.txt';
shell 'touch ampl_network_coupledgen.txt';
shell 'touch ampl_network_hvdc_angle_droop_active_power_control.txt';
shell 'touch ampl_network_hvdc_operator_active_power_range.txt';
shell 'touch ampl_network_static_var_compensators_standby_automaton.txt';

###############################################################################
# Indicateur de crash :
# Si l'execution se termine avant l'ecriture des resultats, le 
# satut CRASH apparaitra.
###############################################################################
param final_status symbolic;
let final_status := "CRASH";
printf "%s %s\n","final_status", final_status > projector_results_indic.txt;
close projector_results_indic.txt;



###############################################################################
# Options generales
###############################################################################
option dual_initial_guesses 0;
option presolve 10;
option show_boundtol 0;
option solver knitroampl;



###############################################################################
# Declaration des suffixes
###############################################################################
suffix cfeastol IN;
suffix xfeastol IN;

suffix cscalefactor IN;
suffix xscalefactor IN;
suffix objscalefactor IN;

suffix usercomp IN;
suffix intvarstrategy IN;

suffix knitro_feaserror OUT;
suffix knitro_opterror OUT;
suffix knitro_neval OUT;
suffix knitro_niter OUT;


###############################################################################
# Inclusions fichier .mod et fichier .dat
###############################################################################
model "projector.mod";
data  "projector.dat";


###############################################################################
# Correction des donnees reactives des groupes : si Qmin>Qmax on echange Qmin et Qmax
###############################################################################
# Version Jean Maeght Juin 2017
for {(g,n) in UNIT} {
  # Correction Qmin Qmax a Pmin
  if unit_Qp[g,n] < unit_qp[g,n] then {
    printf "Attention groupe %s (noeud %i, poste %s) : unit_Qp=%.2f < unit_qp[g,n]=%.2f -> on les corrige en les inversant\n",
    unit_id[g,n],n,substation_id[unit_substation[g,n]],unit_Qp[g,n],unit_qp[g,n];
    let tempo        := unit_Qp[g,n];
    let unit_Qp[g,n] := unit_qp[g,n];
    let unit_qp[g,n] := tempo;
  }
  # Correction Qmin Qmax a Pmax
  if unit_QP[g,n] < unit_qP[g,n] then {
    printf "Attention groupe %s (noeud %i, poste %s) : unit_QP=%.2f < unit_qP[g,n]=%.2f -> on les corrige en les inversant\n",
    unit_id[g,n],n,substation_id[unit_substation[g,n]],unit_QP[g,n],unit_qP[g,n];
    let tempo        := unit_QP[g,n];
    let unit_QP[g,n] := unit_qP[g,n];
    let unit_qP[g,n] := tempo;
  }
}



###############################################################################
# C'est la commande "check" ci-dessous qui realise veritablement les checks du fichier .mod
###############################################################################
check;



###############################################################################
# Correction des valeurs bmin et bmax des CSPR
###############################################################################
# 31 mai 2018 : les conversions pour les CSPR sont erronnees dans Powsybl, donc on doit modifier les valeurs ici
for {(s,n) in SVCCC} {
  if ( abs(svc_bmin[s,n]) + abs(svc_bmax[s,n]) ) < 0.1
  then {
    printf "Poste %s : valeur bmin du VSC '%s' trop faible, corrigee par %f * %i^2 / 100 = %.2f\n",
      substation_id[noeud_poste[n]],svc_id[s,n],svc_bmin[s,n],substation_Vnomi[noeud_poste[n]],
      svc_bmin[s,n] * 0.01 * substation_Vnomi[noeud_poste[n]]^2;
    printf "Poste %s : valeur bmax du VSC '%s' trop faible, corrigee par  %f * %i^2 / 100 =  %.2f\n",
      substation_id[noeud_poste[n]],svc_id[s,n],svc_bmax[s,n],substation_Vnomi[noeud_poste[n]],
      svc_bmax[s,n] * 0.01 * substation_Vnomi[noeud_poste[n]]^2;
    let svc_bmin[s,n] := svc_bmin[s,n] * 0.01 * substation_Vnomi[noeud_poste[n]]^2;
    let svc_bmax[s,n] := svc_bmax[s,n] * 0.01 * substation_Vnomi[noeud_poste[n]]^2;
  }
  #b0 est en Siemens. Il faut per-unite
  let svc_b0[s] := svc_b0[s] * 0.01 * substation_Vnomi[noeud_poste[n]]^2;
}


###############################################################################
# Correction des 9999 en mode compatibilite
###############################################################################

if (specificCompatibility==1) then let {(s,n) in SVC : abs(svc_Q0[s,n]--99999.0)<1E-10} svc_Q0[s,n]:=0;


#En mode veille, un CSPR peut etre marque reglant alors que la tension n'est pas suffisamment eloignee pour qu'il regule
#On desactive le reglage. Il faut distinguer ce cas de la butee
#Si on sait qu'il est en mode veille grace a l'extension, la gestion est plus aisee et on peut meme corriger l'erreur car on connait b0
for {(s,n) in SVCCC  : svc_vregul[s,n]=="true" } {
	if (specificCompatibility==1) then {
		#Malheureusement, la partie b0 est considere comme un condensateur tandis que la partie bmin-bmax comme un groupe
		#Donc on corrige les bmin et bmax pour retomber sur les limites d'hades, mais on s'assure de
		#seulement resserer l'intervalle car Eurostag attend les "bons" bmin
		let svc_bmin[s,n] := max(svc_bmin[s,n]/noeud_V0[n]^2,svc_bmin[s,n]) + svc_b0[s];
		let svc_bmax[s,n] := min(svc_bmax[s,n]/noeud_V0[n]^2,svc_bmax[s,n]) + svc_b0[s];
	}
		
	if (  svc_standby[s]<>"not initialized") then {
		#Si le CSPR n'est pas en butee
		if (abs(svc_Q0[s,n]--100*svc_bmin[s,n]*noeud_V0[n]^2)>1 and abs(svc_Q0[s,n]--100*svc_bmax[s,n]*noeud_V0[n]^2)>1) then {
			if ( svc_standby[s]=="false" ) then {
				if abs(noeud_V0[n]-svc_targetV[s,n])>0.002 then {
					printf "CSPR %i %i %s pas en veille dont le couple V,Q est incomprehensible => regulation de tension desactivee\n", s, n, svc_description[s, n];
					printf " reactif produit %f , borne sup %f, borne inf %f\n", svc_Q0[s,n], -100*svc_bmin[s,n]*noeud_V0[n]^2, -100*svc_bmax[s,n]*noeud_V0[n]^2;
					printf " bmin %f , bmax %f , b0 %f \n", svc_bmin[s,n], svc_bmax[s,n], svc_b0[s];
					let svc_vregul[s,n]:="false"
				}
			}
			else {
				if ( abs(noeud_V0[n]-svc_low_targetV[s])<0.002 ) then {
					let svc_targetV[s,n] := svc_low_targetV[s];
				} else {
					if ( abs(noeud_V0[n]-svc_high_targetV[s])<0.002 ) then {
						let svc_targetV[s,n] := svc_high_targetV[s];
					}
					else {
						if ( noeud_V0[n]<svc_lowVoltageThreshold[s] or noeud_V0[n]>svc_highVoltageThreshold[s]) then {
							printf "CSPR %i %i %s en veille dont le couple V,Q est incomprehensible => regulation de tension desactivee\n", s, n, svc_description[s, n];
							let svc_vregul[s,n]:="false";
						}
					}
				}
			}
		}
	}
	else {
		if (abs(noeud_V0[n]-svc_targetV[s,n])>0.002 and abs(svc_Q0[s,n]--100*svc_bmin[s,n]*noeud_V0[n]^2)>1 and abs(svc_Q0[s,n]--100*svc_bmax[s,n]*noeud_V0[n]^2)>1) then {
			if (specificCompatibility==1) then {
				printf "CSPR %i %i %s probablement en mode veille ou q0 non modelise=> regulation de tension desactivee\n", s, n, svc_description[s, n];
                                #printf " reactif produit %f , borne sup %f, borne inf %f\n", svc_Q0[s,n], -100*svc_bmin[s,n]*noeud_V0[n]^2, -100*svc_bmax[s,n]*noeud_V0[n]^2;
                                #printf " bmin %f , bmax %f , b0 %f \n", svc_bmin[s,n], svc_bmax[s,n], svc_b0[s];
				let svc_vregul[s,n]:="false";
			}
		}
	}
}

if (specificCompatibility==1) then let {(s,n) in VSCCONV : abs(vscconv_P0[s,n]-999999.0)<1E-10 } vscconv_P0[s,n]:=0;




################################################################################
# Calcul du noeud qui aura la phase fixee
################################################################################
let noeud_phase_nulle := min{n in NOEUDCC} n;
let tempo := 0;
for {n in NOEUDCC : substation_Vnomi[noeud_poste[n]] >= 300}
  let tempo := max (tempo, card({(qq,mm,nn) in QUADCC: mm==n || nn==n}));
for {n in NOEUDCC : substation_Vnomi[noeud_poste[n]] >= 300 && card({(qq,mm,nn) in QUADCC: mm==n || nn==n}) == tempo}
  let noeud_phase_nulle := n;
if ( tempo > 0 ) then
  printf "Noeud 400kV le plus maille : %i dans le poste %s/%s avec %i quadripoles\n",
  noeud_phase_nulle,
  substation_id[noeud_poste[noeud_phase_nulle]],
  substation_description[noeud_poste[noeud_phase_nulle]],
  tempo;
if ( tempo == 0 ) then
  printf "Noeud 400kV le plus maille : non trouve. On prend le premier noeud (=%i) pour fixer la phase\n",
  noeud_phase_nulle;



###############################################################################
# Verification coherence des tensions nominales
###############################################################################
for {(g,n,gid) in UNIT_DOMAIN} {
  let tempo := max{(numero,g,n,gid) in UNIT_DOMAIN_CTR} domain_Vnomi[numero,gid];
  if abs(tempo-substation_Vnomi[unit_substation[g,n]]) > 0.1
  then {
	printf "Probleme avec le groupe [%i,%s] : Vnomi=%.2f dans le poste %s de tension %.2f\n",
	    g,
	    gid,
	    tempo,
	    substation_id[unit_substation[g,n]],
	    substation_Vnomi[unit_substation[g,n]];
	    let  gen_vnom_mismatch[g,n,gid] := 1;
  	}
  }
  


###############################################################################
# Point initial
###############################################################################
let {n in NOEUDCC} Ph[n] := noeud_angl0[n];
fix Ph[noeud_phase_nulle]; # On ne le fixe pas a zero mais a sa valeur initiale
let {n in NOEUDCC} V[n]  := noeud_V0[n];

#Cas des quadripoles ouverts a une extremite
let {(qq,m,n) in QUADCC : m==-1 or n==-1} Phouv[qq,m,n] := if n==-1 and m<>-1 then noeud_angl0[m] else if n<>-1 and m==-1 then noeud_angl0[n] else 0; #Initialisation approximative
let {(qq,m,n) in QUADCC : m==-1 or n==-1} Vouv[qq,m,n] :=
        if n==-1 and m<>-1 then
                (noeud_V0[m] * quad_admi[qq,m,n] / (  quad_Ror[qq,m,n]* sqrt((quad_admi[qq,m,n]*sin(quad_angper[qq,m,n])+quad_Gor[qq,m,n])^2+(quad_admi[qq,m,n]*cos(quad_angper[qq,m,n])-quad_Bor[qq,m,n])^2)))
        else if m==-1 and n<>-1 then
                (noeud_V0[n] * quad_admi[qq,m,n] / (1/quad_Ror[qq,m,n]* sqrt((quad_admi[qq,m,n]*sin(quad_angper[qq,m,n])+quad_Gex[qq,m,n])^2+(quad_admi[qq,m,n]*cos(quad_angper[qq,m,n])-quad_Bex[qq,m,n])^2)))
        else 0
        ; #Initialisation normalement exacte (non testee). Initialiser par noeud_V0[m/n] est vraisemblablement suffisant



let {(g,n) in UNITCC} unit_P[g,n] := -unit_P0[g,n]; # On initialise sur la valeur issue d'hades, mais la 
let {(g,n) in UNITCC} unit_Q[g,n] := -unit_Q0[g,n]; # convention de signe est inversee
let {(sc,n) in VSCCONV} vscconv_Q[sc,n] := vscconv_Q0[sc,n]; # Homogene a une consommation


# Jean Maeght + Nicolas Omont le 29 aout 2016 :
# Si aucun domaine dynamique n'a Ã©tÃ© fourni, alors on ne modifie pas le groupe
# Tous les groupes qui n'ont pas de domaine dynamique sont donc consideres comme des groupes PQ
# 27 juin 2018 : on change d'approche. Cf paragraphe "modelisation" en debut de fichier
#fix {(g,n) in UNITCC diff UNITCC_PQV} unit_P[g,n];
#fix {(g,n) in UNITCC diff UNITCC_PQV} unit_Q[g,n];
# On ne peut pas en plus fixer la tension, sinon risque de non realisabilite pour 
# question numerique (si on veut fixer P Q V en meme temps, il y a risque d'erreur numerique)



###############################################################################
# Valeurs fixee (voir paragraphe modelisation en debut de fichier)
###############################################################################

# Groupes sans domaine dynamique
#                  Valeur modelisee :   P        Q        V
# Groupes PV sans domaine dynamique : optimise libre    optimise
# Groupes PQ sans domaine dynamique : optimise fixe     libre	
fix {(g,n) in UNITCC diff (UNITCC_PV union UNITCC_PQV) } unit_Q[g,n] := -unit_Q0[g,n];

# Change pour une prise en compte explicite de la consigne
# Fonctionnement des stations de conversion HVDC mode VSC : injection active fixee
# fix {(sc,n) in VSCCONV} vscconv_P[sc,n] := vscconv_P0[sc,n];

# Fonctionnement des stations de conversion HVDC mode VSC sans regulation de tension : injection reactive fixee
fix {(sc,n) in VSCCONV : vscconv_vregul[sc,n]!="true"} vscconv_Q[sc,n] := vscconv_Q0[sc,n];


###############################################################################
# Descriptifs
###############################################################################
display card(NOEUDCC),card(NOEUDCC_V0),
  Ph_min, Ph_max, Ph[noeud_phase_nulle],
  card(UNIT),
  card({(g,n) in UNITCC: unit_vregul[g,n]!="true"}),
  card({(g,n) in UNITCC: unit_vregul[g,n]=="true"}),
  card(UNITCC_PV),
  card(UNITCC_PQV),
  card(UNITCC  diff UNITCC_PQV),
  card(UNITCC_PV diff UNITCC_PQV),
  card(UNIT_TRAPEZE),
  card(UNITHORSPMIN),card(UNITHORSPMAX),
  card({(g,n) in UNITCC_PQV : unit_id[g,n] in UNITHORSPMIN}),
  card({(g,n) in UNITCC_PQV : unit_id[g,n] in UNITHORSPMAX}),
  UNITHORSPMIN,UNITHORSPMAX,
  card(UNIT_DOMAIN_CTR),
#  UNIT_DOMAIN,
#  DOMAIN_ID,
  SVC,SVC_V,SVC_FIXE
  ;
if card(COUPLEDGEN) > 0 then {
  display coupledgen_control;
  expand ctr_couplages_gen;
}

printf "Nombre de noeuds dans la composante connexe pincipale (i.e. la composante connexe numero 0) : %i\n",card(NOEUDCC);
printf "Nombre de noeuds de la composante connexe pincipale ayant une V0 renseignee : %i\n",card(NOEUDCC_V0);
printf "Nombre de groupes decrits : %i\n",card(UNIT);
printf "Nombre de groupes sur la composante connexe principale : %i\n",card(UNITCC);
printf "Nombre de groupes decrits comme PV : %i\n",card({(g,n) in UNITCC: unit_vregul[g,n]=="true"});
printf "Nombre de groupes decrits comme PQ : %i\n",card({(g,n) in UNITCC: unit_vregul[g,n]!="true"});
printf "Nombre de groupes ayant un domaine dynamique : %i\n",card(DOMAIN_IDENTIFIANTS);
printf "Nombre de groupes connectes et demarres et ayant un domaine dynamique : %i\n",card(UNIT_DOMAIN);
printf "Nombre groupes pour lesquels il y a un mismatch de tension entre l'etat de reseau et les domaines : %i\n",
  card({(g,n,gid) in UNIT_DOMAIN : gen_vnom_mismatch[g,n,unit_id[g,n]]!=0});
printf "Nombre groupes que l'on va projeter dans leur domaine P Q V : %i\n",card(UNITCC_PQV);

if card(UNITCC_PQV) == 0 then printf "\n*** Aucun groupe avec domaine dynamique%s\n\n"," ";

printf "\n";

###############################################################################
# Scaling
###############################################################################
let {n in NOEUDCC} V[n].xscalefactor := V[n].ub2-V[n].lb2;
let {n in NOEUDCC} Ph[n].xscalefactor := 1e-2;
let {(g,n) in UNITCC} unit_P[g,n].xscalefactor := max(1,abs(unit_P[g,n].ub2-unit_P[g,n].lb2));
let {(g,n) in UNITCC} unit_Q[g,n].xscalefactor := max(1,abs(unit_Q[g,n].ub2-unit_Q[g,n].lb2));
let {n in NOEUDCC} bilan_P_noeud[n].cscalefactor := 1/max(1e-0,abs(sum{(c,n) in CONSOCC} conso_PFix[c,n]));
let {n in NOEUDCC} bilan_Q_noeud[n].cscalefactor := 1/max(1e-0,abs(sum{(c,n) in CONSOCC} conso_QFix[c,n]));
let {(g,n) in UNITCC_PQV} ctr_trapeze_qmax[g,n].cscalefactor := 1/max(1.0,abs(ctr_trapeze_qmax_rhs[g,n]));
let {(g,n) in UNITCC_PQV} ctr_trapeze_qmin[g,n].cscalefactor := 1/max(1.0,abs(ctr_trapeze_qmin_rhs[g,n]));
let {(numero,g,n,gid) in UNIT_DOMAIN_CTR} ctr_domain[numero,g,n,gid].cscalefactor := 
  1/max(1.0,abs(domain_RHS[numero,gid]));
#let {(s,n) in SVC_V} svc_b[s,n].xscalefactor := (svc_bmax[s,n] - svc_bmin[s,n]); # Semble ralentir le calcul. A retester


###############################################################################
# Tolerances de realisabilite
###############################################################################
let {n in NOEUDCC} V[n].xfeastol := (0.1/substation_Vnomi[noeud_poste[n]]);
let {n in NOEUDCC} Ph[n].xfeastol := 1.0; # Peu importe les bornes de Ph
let {(g,n) in UNITCC} unit_P[g,n].xfeastol := 0.1;
let {(g,n) in UNITCC} unit_Q[g,n].xfeastol := 0.1;
let {n in NOEUDCC} bilan_P_noeud[n].cfeastol := 0.01;
let {n in NOEUDCC} bilan_Q_noeud[n].cfeastol := 0.01;
let {(g,n) in UNITCC_PQV} ctr_trapeze_qmax[g,n].cfeastol := 0.01;
let {(g,n) in UNITCC_PQV} ctr_trapeze_qmin[g,n].cfeastol := 0.01;
let {(numero,g,n,gid) in UNIT_DOMAIN_CTR} ctr_domain[numero,g,n,gid].cfeastol := 0.01;
let {(s,n) in SVC_V} limites_reactif_hades[s,n].cfeastol := 0.001;


###############################################################################
# Display debug
###############################################################################
/*
expand limites_sup_reactif_Ppositif,limites_inf_reactif_Ppositif,
limites_sup_reactif_Pnegatif,limites_inf_reactif_Pnegatif ;
*/

/*
display
quad_R[9321,2765,2768],
quad_X[9321,2765,2768],
quad_ptrDeph[9321,2765,2768],
deph_table[quad_ptrDeph[9321,2765,2768]],
deph_tap0 [quad_ptrDeph[9321,2765,2768]],
tap_x[deph_table[quad_ptrDeph[9321,2765,2768]],deph_tap0[quad_ptrDeph[9321,2765,2768]]],
tap_ratio[deph_table[quad_ptrDeph[9321,2765,2768]],deph_tap0[quad_ptrDeph[9321,2765,2768]]],
tap_angle[deph_table[quad_ptrDeph[9321,2765,2768]],deph_tap0[quad_ptrDeph[9321,2765,2768]]],
quad_Ror[9321,2765,2768],
quad_dephor[9321,2765,2768];
*/

###############################################################################
# Resolution
###############################################################################
option knitro_options 
 " presolve=0 bar_directinterval=10 maxcgit=100 bar_initpt=2 honorbnds=0 scale=2 opttol=1 opttolabs=1e-1 feastol=1 feastolabs=1e-3 debug=0 algorithm=1 maxit=500 maxtime_real=60";  

# En cas d'echec de l'optimisation, relances et comptages
param nb_solve_max = 6;
param nb_solve;
let nb_solve := 0; 

repeat {
  solve;
  let nb_solve := nb_solve + 1;
  printf "*** Iteration de solve numero %i, solve_result_num=%i\n\n",nb_solve,solve_result_num;
  }
while ( ( solve_result_num >= 100 and solve_result_num < 400 ) or solve_result_num >= 400 ) and nb_solve<nb_solve_max;


###############################################################################
# Ecriture des resultats
###############################################################################
include projectorOutput.run;

###############################################################################
# Fin du fichier
###############################################################################
print "Fin du fichier projector.run";

